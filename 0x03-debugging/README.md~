# Debugging in C

This repository contains solutions to debugging tasks in the context of programming in the C language. The primary goal of this project is to develop skills in manually debugging code, understanding common debugging techniques, and interpreting error messages. The tasks aim to enhance your understanding of debugging concepts and techniques so that you can identify and resolve errors in your code effectively.

## Learning Objectives

Upon completing this project, you will be able to:

1. Explain the concept of debugging and its significance in software development.
2. Describe various methods of manual debugging.
3. Interpret error messages generated during compilation and execution.
4. Apply debugging techniques to fix issues in code.
5. Understand the concept of leap years and how they affect date calculations.

## Project Structure

The project consists of multiple tasks, each designed to address specific debugging scenarios and challenges. The tasks are as follows:

### Task 0: Multiple Mains

In this task, you will create a new main file (`0-main.c`) to test the function `positive_or_negative()`. The objective is to ensure that the function works correctly when provided with the case of 0.

### Task 1: Like, Comment, Subscribe

You will modify the provided main file (`1-main.c`) to comment out the section of code that causes an infinite loop. The goal is to prevent the program from entering the infinite loop and causing execution to hang.

### Task 2: 0 > 972?

The task involves fixing a program that prints the largest of three integers. You need to correct the code in `2-largest_number.c` so that it accurately determines and prints the largest of the three numbers.

### Task 3: Leap Year

In this task, you will debug a program that converts a date to the day of the year and calculates the remaining days in the year, considering leap years. You will need to correct the code in `3-print_remaining_days.c` to handle leap years correctly and provide accurate output for various date scenarios.

## Guidelines

- All code files should be compiled on Ubuntu 20.04 LTS using the specified options: `-Wall -Werror -Wextra -pedantic -std=gnu89`.
- Code style should follow the "Betty" style guide.
- Each task has its own specific requirements and objectives. Follow the instructions provided for each task to complete it successfully.
- Make use of debugging techniques, manual code inspection, and error message analysis to identify and fix issues in the code.
- Document your debugging process, changes made, and explanations of code fixes in comments within the code files.
- Compile and run the code after making changes to verify that the issues have been resolved and the output is correct.

## Author

This project was completed by [Your Name] as part of the ALX Software Engineering program. Please note that plagiarism is strictly prohibited, and all solutions should be developed independently.

---
*Copyright Â© 2023 ALX. All rights reserved.*
